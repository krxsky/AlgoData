

Data Tables:

Double_Hash   LoadFactor  Capacity  #Inserted  Average_probes/insert
goodHash      0.25        16001     4000       1.14625
goodHash      0.50        8009      4000       1.39475
goodHash      0.75        5333      4000       1.86225
poorHash      0.25        16001     4000       11.5935
poorHash      0.50        8009      4000       26.0515
poorHash      0.75        5333      4000       13.2963

Quad_Hash     LoadFactor  Capacity  #Inserted  Average_probes/insert  Knuth's_estimate
goodHash      0.25        16001     4000       1.148                  1.15072829              
goodHash      0.50        8009      4000       1.41275                1.38629436 
goodHash      0.75        5333      4000       1.949                  1.84839248
poorHash      0.25        16001     4000       45.1075                1.15072829  
poorHash      0.50        8009      4000       45.3158                1.38629436
poorHash      0.75        5333      4000       47.3453                1.84839248


1) Our poorHash is as described in the assignment. The hashCode is generated by adding up
   all the ASCII values. Thus, repetition (same hashCode for different keys) may be very
	 common. For our goodHash, we found out online that bit shift is helpful for making good
	 hashCodes (more unique and less repetition). We learnt in class that prime is also very
	 helpful. We combined these two elements and borrowed from the web to write the goodHash
	 we have. As shown by our data, our goodHash performs significantly better than the 
	 poorHash. Our actual loadFactor is not much smaller then the requested ones. We find the 
	 first prime bigger than the desired size and since our data is of size 4000, the capacity
	 is very close to what we desired.

2) From the data, there doesn't seem to be any significant relationship between them. but 
   with higher LoadFactor the difference between good and poorHash becomes slightly larger
	 in general.

3) The Knuth estimate turned out be be very close to what we had for our goodHash.
	 It is very different from our poorHash due to the poor quality of the hashCode.


Notes: zip includes  1) genData.cpp 
                     2) hashDriver.cpp
										 3)README.txt 
										 4)4000record.txt (testfile of 4000 lines)
										 5)filename.txt (testfile of 1000 lines)

Sample output from our main:

y5q8@lin22:~/Documents/cpsc221/pa2> ./a.out
Stats: 
load factor: 0.25
hash type: g
probe type: d
probe/insertion: 4585/4000 = 1.14625
table size: 16001
Stats: 
load factor: 0.5
hash type: g
probe type: d
probe/insertion: 5579/4000 = 1.39475
table size: 8009
Stats: 
load factor: 0.75
hash type: g
probe type: d
probe/insertion: 7449/4000 = 1.86225
table size: 5333
Stats: 
load factor: 0.25
hash type: g
probe type: q
probe/insertion: 4592/4000 = 1.148
table size: 16001
Stats: 
load factor: 0.5
hash type: g
probe type: q
probe/insertion: 5651/4000 = 1.41275
table size: 8009
Stats: 
load factor: 0.75
hash type: g
probe type: q
probe/insertion: 7796/4000 = 1.949
table size: 5333
Stats: 
load factor: 0.25
hash type: b
probe type: d
probe/insertion: 46374/4000 = 11.5935
table size: 16001
Stats: 
load factor: 0.5
hash type: b
probe type: d
probe/insertion: 104206/4000 = 26.0515
table size: 8009
Stats: 
load factor: 0.75
hash type: b
probe type: d
probe/insertion: 53185/4000 = 13.2963
table size: 5333
Stats: 
load factor: 0.25
hash type: b
probe type: q
probe/insertion: 180430/4000 = 45.1075
table size: 16001
Stats: 
load factor: 0.5
hash type: b
probe type: q
probe/insertion: 181263/4000 = 45.3158
table size: 8009
Stats: 
load factor: 0.75
hash type: b
probe type: q
probe/insertion: 189381/4000 = 47.3453
table size: 5333
Insert MUZEJKGA 10
Inserted
Position 55: Key: MUZEJKGA Value: 10
search for inserted
Found at 55
Position 55: Key: MUZEJKGA Value: 10
remove that one
Removed
Position 55: Tombstone
remove once more
Not deleted/not found
Position 55: Tombstone
insert again
Inserted
Position 55: Key: MUZEJKGA Value: 10
search for it
Found at 55
Position 55: Key: MUZEJKGA Value: 10
insert with same key diff val
Inserted
Position 55: Key: MUZEJKGA Value: 3
find it
Found at 55
Position 55: Key: MUZEJKGA Value: 3
remove 
Removed
Position 55: Tombstone
insert again
Inserted
Position 55: Key: MUZEJKGA Value: 3

